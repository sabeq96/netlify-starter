"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = getConfig;
exports.buildConfig = buildConfig;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _path = _interopRequireDefault(require("path"));

var _chokidar = _interopRequireDefault(require("chokidar"));

var _resolveFrom = _interopRequireDefault(require("resolve-from"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _utils = require("../utils");

var _plugins = _interopRequireWildcard(require("./plugins"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// the default static.config.js location
var defaultConfig = {};
var DEFAULT_NAME_FOR_STATIC_CONFIG_FILE = 'static.config.js';

var DEFAULT_PATH_FOR_STATIC_CONFIG = _path["default"].resolve(_path["default"].join(process.cwd(), DEFAULT_NAME_FOR_STATIC_CONFIG_FILE));

var DEFAULT_ROUTES = [{
  path: '/'
}];
var DEFAULT_ENTRY = 'index.js';
var DEFAULT_EXTENSIONS = ['.js', '.jsx']; // Retrieves the static.config.js from the current project directory

function getConfig(state) {
  var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (config) {
    if (state.debug) {
      console.log('getConfig():');
      console.log(state);
    }

    return config;
  };
  var configPath = state.configPath || state.packageConfig.config || DEFAULT_PATH_FOR_STATIC_CONFIG;
  state = _objectSpread({}, state, {
    originalConfig: configPath
  });

  var resolvedPath = _path["default"].resolve(configPath);

  var noConfig = configPath === DEFAULT_PATH_FOR_STATIC_CONFIG && !resolvedPath;

  if (noConfig) {
    // last
    state = buildConfig(state, defaultConfig);
    return callback(state);
  }

  state = buildConfigFromPath(state, resolvedPath || configPath);

  if (state.stage === 'dev') {
    _chokidar["default"].watch(resolvedPath, {
      ignoreInitial: true
    }).on('all',
    /*#__PURE__*/
    (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee() {
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              console.log('');
              console.log("Updating static.config.js");
              state = buildConfigFromPath(state, resolvedPath);
              callback(state);

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));
  }

  return callback(state);
}

function buildConfigFromPath(state, configPath) {
  delete require.cache[configPath];

  var config = require(configPath)["default"];

  return buildConfig(state, config);
}

function buildConfig(state) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  // Default Paths
  var paths = _objectSpread({
    root: _path["default"].resolve(process.cwd()),
    src: 'src',
    dist: 'dist',
    temp: 'tmp',
    buildArtifacts: 'artifacts',
    devDist: 'tmp/dev-server',
    "public": 'public',
    plugins: 'plugins',
    pages: 'src/pages',
    nodeModules: 'node_modules',
    assets: ''
  }, config.paths || {}); // Use the root to resolve all other relative paths


  var resolvePath = function resolvePath(relativePath) {
    return _path["default"].resolve(paths.root, relativePath);
  }; // Resolve and replace all pathss


  var DIST = process.env.REACT_STATIC_ENV === 'development' ? resolvePath(paths.devDist || paths.dist) : resolvePath(paths.dist);

  var ASSETS = _path["default"].resolve(DIST, paths.assets);

  paths = {
    ROOT: paths.root,
    SRC: resolvePath(paths.src),
    DIST: DIST,
    ASSETS: ASSETS,
    PLUGINS: resolvePath(paths.plugins),
    TEMP: resolvePath(paths.temp),
    ARTIFACTS: resolvePath(paths.buildArtifacts),
    PUBLIC: resolvePath(paths["public"]),
    NODE_MODULES: resolvePath(paths.nodeModules),
    EXCLUDE_MODULES: paths.excludeResolvedModules || resolvePath(paths.nodeModules),
    PACKAGE: resolvePath('package.json'),
    HTML_TEMPLATE: _path["default"].join(DIST, 'index.html'),
    STATIC_DATA: _path["default"].join(ASSETS, 'staticData') // siteRoot, basePath, publicPath, and assetPath resolution

  };
  var siteRoot = '';
  var basePath = '';
  var assetsPath = '';

  if (process.env.REACT_STATIC_ENV === 'development') {
    basePath = (0, _utils.cleanSlashes)(config.devBasePath);
    assetsPath = config.devAssetsPath || paths.assets || assetsPath;
  } else if (state.staging) {
    siteRoot = (0, _utils.cutPathToRoot)(config.stagingSiteRoot || '/', '$1');
    basePath = (0, _utils.cleanSlashes)(config.stagingBasePath);
    assetsPath = config.stagingAssetsPath || paths.assets || assetsPath;
  } else {
    siteRoot = (0, _utils.cutPathToRoot)(config.siteRoot || '/', '$1');
    basePath = (0, _utils.cleanSlashes)(config.basePath);
    assetsPath = config.assetsPath || paths.assets || assetsPath;
  }

  var publicPath = "".concat((0, _utils.cleanSlashes)("".concat(siteRoot, "/").concat(basePath), {
    leading: false
  }), "/");

  if (assetsPath && !(0, _utils.isAbsoluteUrl)(assetsPath)) {
    assetsPath = "/".concat((0, _utils.cleanSlashes)("".concat(basePath, "/").concat(assetsPath)), "/");
  } // add trailing slash only if assetsPath was supplied, but no trailing slash


  if (assetsPath && !assetsPath.endsWith('/')) {
    assetsPath = "".concat(assetsPath, "/");
  } // Add the project root as a plugin. This allows the dev
  // to use the plugin api directory in their project if they want


  var plugins = [].concat((0, _toConsumableArray2["default"])(config.plugins || []), [paths.ROOT]); // if (process.env.NODE_ENV !== 'test' && !entry) {
  //   throw new Error(
  //     `Could not resolve entry file from location: ${entry} using extensions: ${(
  //       config.extensions || DEFAULT_EXTENSIONS
  //     ).join(', ')}`
  //   )
  // }
  // Defaults

  config = _objectSpread({
    // Defaults
    getSiteData: function getSiteData() {
      return {};
    },
    prefetchRate: 5,
    maxThreads: Infinity,
    disableRoutePrefixing: false,
    outputFileRate: 100,
    extensions: DEFAULT_EXTENSIONS,
    getRoutes: function () {
      var _getRoutes = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee2() {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", DEFAULT_ROUTES);

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function getRoutes() {
        return _getRoutes.apply(this, arguments);
      }

      return getRoutes;
    }(),
    minLoadTime: 200,
    disablePreload: false,
    disableRuntime: false,
    preloadPollInterval: 300,
    productionSourceMaps: false,
    entry: DEFAULT_ENTRY
  }, config, {
    // Materialized Overrides
    paths: paths,
    plugins: plugins,
    siteRoot: siteRoot,
    basePath: basePath,
    publicPath: publicPath,
    assetsPath: assetsPath,
    extractCssChunks: config.extractCssChunks || false,
    inlineCss: config.inlineCss || false,
    babelExcludes: config.babelExcludes || [],
    devServer: _objectSpread({
      host: 'localhost',
      port: 3000
    }, config.devServer || {})
  });
  config.terser = config.terser || {};
  config.terser.terserOptions = config.terser.terserOptions || {};
  config.terser.terserOptions.mangle = config.terser.terserOptions.mangle || {};
  config.terser.terserOptions.parse = config.terser.terserOptions.parse || {};
  config.terser.terserOptions.compress = config.terser.terserOptions.compress || {};
  config.terser.terserOptions.output = config.terser.terserOptions.output || {}; // Set env variables to be used client side

  process.env.REACT_STATIC_MIN_LOAD_TIME = config.minLoadTime;
  process.env.REACT_STATIC_PREFETCH_RATE = config.prefetchRate;
  process.env.REACT_STATIC_DISABLE_ROUTE_PREFIXING = config.disableRoutePrefixing;
  process.env.REACT_STATIC_DISABLE_PRELOAD = config.disablePreload;
  process.env.REACT_STATIC_DISABLE_RUNTIME = config.disableRuntime;
  process.env.REACT_STATIC_PRELOAD_POLL_INTERVAL = config.preloadPollIntervalw;
  process.env.REACT_STATIC_ROOT_PATH_READ_ONLY = paths.ROOT;
  process.env.REACT_STATIC_TEMPLATES_PATH = _path["default"].join(paths.ARTIFACTS, 'react-static-templates.js');
  process.env.REACT_STATIC_PLUGINS_PATH = _path["default"].join(paths.ARTIFACTS, 'react-static-browser-plugins.js');
  process.env.REACT_STATIC_UNIVERSAL_PATH = require.resolve('react-universal-component');

  var resolvePlugin = function resolvePlugin(originalLocation) {
    var options = {};

    if (Array.isArray(originalLocation)) {
      options = originalLocation[1] || {};
      originalLocation = originalLocation[0];
    }

    var location = [function () {
      // Absolute require
      try {
        var found = require.resolve(originalLocation);

        return found.includes('.') ? _path["default"].resolve(found, '../') : found;
      } catch (err) {//
      }
    }, function () {
      // Absolute
      if (_fsExtra["default"].pathExistsSync(originalLocation)) {
        return originalLocation;
      }
    }, function () {
      // Plugins Dir
      var found = _path["default"].resolve(paths.PLUGINS, originalLocation);

      if (_fsExtra["default"].pathExistsSync(found)) {
        return found;
      }
    }, function () {
      // Plugins Dir require
      try {
        var found = (0, _resolveFrom["default"])(paths.PLUGINS, originalLocation);
        return found.includes('.') ? _path["default"].resolve(found, '../') : found;
      } catch (err) {//
      }
    }, function () {
      // CWD
      var found = _path["default"].resolve(process.cwd(), originalLocation);

      if (_fsExtra["default"].pathExistsSync(found)) {
        return found;
      }
    }, function () {
      // CWD require
      try {
        var found = (0, _resolveFrom["default"])(process.cwd(), originalLocation);
        return found.includes('.') ? _path["default"].resolve(found, '../') : found;
      } catch (err) {//
      }
    }, function () {
      if (process.env.NODE_ENV === 'test') {
        // Allow plugins to be mocked
        return require('path').resolve('./src/static/__mocks__/mock-plugin');
      }
    }].reduce(function (prev, curr) {
      return prev || curr();
    }, null); // TODO: We have to do this because we don't have a good mock for process.cwd() :(

    if (!location) {
      throw new Error("Could not find a plugin directory for the plugin: \"".concat(originalLocation, "\". We must bail!"));
    }

    var nodeLocation = _path["default"].join(location, 'node.api.js');

    var browserLocation = _path["default"].join(location, 'browser.api.js'); // Detect if the node plugin entry exists, and provide the nodeResolver to it


    nodeLocation = _fsExtra["default"].pathExistsSync(nodeLocation) ? nodeLocation : null; // Detect if the browser plugin entry exists, and provide the nodeResolver to it

    browserLocation = _fsExtra["default"].pathExistsSync(browserLocation) ? browserLocation : null;

    var buildPluginHooks = function buildPluginHooks() {
      return {};
    };

    try {
      // Get the hooks for the node api
      if (nodeLocation) {
        buildPluginHooks = require(nodeLocation)["default"];
      } else if (originalLocation !== paths.ROOT && !browserLocation) {
        throw new Error("Could not find a valid node.api.js or browser.api.js plugin file in \"".concat(location, "\". \n") + "The original location: \"".concat(originalLocation, "\". \n") + "The root location: \"".concat(paths.ROOT, "\"."));
      }

      var resolvedPlugin = {
        location: location,
        nodeLocation: nodeLocation,
        browserLocation: browserLocation,
        options: options,
        hooks: buildPluginHooks(options) || {}
      };
      (0, _plugins.validatePlugin)(resolvedPlugin); // Recursively resolve plugins

      if (resolvedPlugin.plugins) {
        resolvedPlugin.plugins = resolvedPlugin.plugins.map(resolvePlugin);
      }

      return resolvedPlugin;
    } catch (err) {
      console.error("The following error occurred in the plugin: \"".concat(originalLocation, "\""));
      throw err;
    }
  };

  state = _objectSpread({}, state, {
    plugins: config.plugins.map(resolvePlugin),
    config: config
  });
  return _plugins["default"].afterGetConfig(state);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdGF0aWMvZ2V0Q29uZmlnLmpzIl0sIm5hbWVzIjpbImRlZmF1bHRDb25maWciLCJERUZBVUxUX05BTUVfRk9SX1NUQVRJQ19DT05GSUdfRklMRSIsIkRFRkFVTFRfUEFUSF9GT1JfU1RBVElDX0NPTkZJRyIsIm5vZGVQYXRoIiwicmVzb2x2ZSIsImpvaW4iLCJwcm9jZXNzIiwiY3dkIiwiREVGQVVMVF9ST1VURVMiLCJwYXRoIiwiREVGQVVMVF9FTlRSWSIsIkRFRkFVTFRfRVhURU5TSU9OUyIsImdldENvbmZpZyIsInN0YXRlIiwiY2FsbGJhY2siLCJjb25maWciLCJkZWJ1ZyIsImNvbnNvbGUiLCJsb2ciLCJjb25maWdQYXRoIiwicGFja2FnZUNvbmZpZyIsIm9yaWdpbmFsQ29uZmlnIiwicmVzb2x2ZWRQYXRoIiwibm9Db25maWciLCJidWlsZENvbmZpZyIsImJ1aWxkQ29uZmlnRnJvbVBhdGgiLCJzdGFnZSIsImNob2tpZGFyIiwid2F0Y2giLCJpZ25vcmVJbml0aWFsIiwib24iLCJyZXF1aXJlIiwiY2FjaGUiLCJwYXRocyIsInJvb3QiLCJzcmMiLCJkaXN0IiwidGVtcCIsImJ1aWxkQXJ0aWZhY3RzIiwiZGV2RGlzdCIsInBsdWdpbnMiLCJwYWdlcyIsIm5vZGVNb2R1bGVzIiwiYXNzZXRzIiwicmVzb2x2ZVBhdGgiLCJyZWxhdGl2ZVBhdGgiLCJESVNUIiwiZW52IiwiUkVBQ1RfU1RBVElDX0VOViIsIkFTU0VUUyIsIlJPT1QiLCJTUkMiLCJQTFVHSU5TIiwiVEVNUCIsIkFSVElGQUNUUyIsIlBVQkxJQyIsIk5PREVfTU9EVUxFUyIsIkVYQ0xVREVfTU9EVUxFUyIsImV4Y2x1ZGVSZXNvbHZlZE1vZHVsZXMiLCJQQUNLQUdFIiwiSFRNTF9URU1QTEFURSIsIlNUQVRJQ19EQVRBIiwic2l0ZVJvb3QiLCJiYXNlUGF0aCIsImFzc2V0c1BhdGgiLCJkZXZCYXNlUGF0aCIsImRldkFzc2V0c1BhdGgiLCJzdGFnaW5nIiwic3RhZ2luZ1NpdGVSb290Iiwic3RhZ2luZ0Jhc2VQYXRoIiwic3RhZ2luZ0Fzc2V0c1BhdGgiLCJwdWJsaWNQYXRoIiwibGVhZGluZyIsImVuZHNXaXRoIiwiZ2V0U2l0ZURhdGEiLCJwcmVmZXRjaFJhdGUiLCJtYXhUaHJlYWRzIiwiSW5maW5pdHkiLCJkaXNhYmxlUm91dGVQcmVmaXhpbmciLCJvdXRwdXRGaWxlUmF0ZSIsImV4dGVuc2lvbnMiLCJnZXRSb3V0ZXMiLCJtaW5Mb2FkVGltZSIsImRpc2FibGVQcmVsb2FkIiwiZGlzYWJsZVJ1bnRpbWUiLCJwcmVsb2FkUG9sbEludGVydmFsIiwicHJvZHVjdGlvblNvdXJjZU1hcHMiLCJlbnRyeSIsImV4dHJhY3RDc3NDaHVua3MiLCJpbmxpbmVDc3MiLCJiYWJlbEV4Y2x1ZGVzIiwiZGV2U2VydmVyIiwiaG9zdCIsInBvcnQiLCJ0ZXJzZXIiLCJ0ZXJzZXJPcHRpb25zIiwibWFuZ2xlIiwicGFyc2UiLCJjb21wcmVzcyIsIm91dHB1dCIsIlJFQUNUX1NUQVRJQ19NSU5fTE9BRF9USU1FIiwiUkVBQ1RfU1RBVElDX1BSRUZFVENIX1JBVEUiLCJSRUFDVF9TVEFUSUNfRElTQUJMRV9ST1VURV9QUkVGSVhJTkciLCJSRUFDVF9TVEFUSUNfRElTQUJMRV9QUkVMT0FEIiwiUkVBQ1RfU1RBVElDX0RJU0FCTEVfUlVOVElNRSIsIlJFQUNUX1NUQVRJQ19QUkVMT0FEX1BPTExfSU5URVJWQUwiLCJwcmVsb2FkUG9sbEludGVydmFsdyIsIlJFQUNUX1NUQVRJQ19ST09UX1BBVEhfUkVBRF9PTkxZIiwiUkVBQ1RfU1RBVElDX1RFTVBMQVRFU19QQVRIIiwiUkVBQ1RfU1RBVElDX1BMVUdJTlNfUEFUSCIsIlJFQUNUX1NUQVRJQ19VTklWRVJTQUxfUEFUSCIsInJlc29sdmVQbHVnaW4iLCJvcmlnaW5hbExvY2F0aW9uIiwib3B0aW9ucyIsIkFycmF5IiwiaXNBcnJheSIsImxvY2F0aW9uIiwiZm91bmQiLCJpbmNsdWRlcyIsImVyciIsImZzIiwicGF0aEV4aXN0c1N5bmMiLCJOT0RFX0VOViIsInJlZHVjZSIsInByZXYiLCJjdXJyIiwiRXJyb3IiLCJub2RlTG9jYXRpb24iLCJicm93c2VyTG9jYXRpb24iLCJidWlsZFBsdWdpbkhvb2tzIiwicmVzb2x2ZWRQbHVnaW4iLCJob29rcyIsIm1hcCIsImVycm9yIiwiY29yZVBsdWdpbnMiLCJhZnRlckdldENvbmZpZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7Ozs7O0FBRUE7QUFDQSxJQUFNQSxhQUFhLEdBQUcsRUFBdEI7QUFDQSxJQUFNQyxtQ0FBbUMsR0FBRyxrQkFBNUM7O0FBQ0EsSUFBTUMsOEJBQThCLEdBQUdDLGlCQUFTQyxPQUFULENBQ3JDRCxpQkFBU0UsSUFBVCxDQUFjQyxPQUFPLENBQUNDLEdBQVIsRUFBZCxFQUE2Qk4sbUNBQTdCLENBRHFDLENBQXZDOztBQUdBLElBQU1PLGNBQWMsR0FBRyxDQUFDO0FBQUVDLEVBQUFBLElBQUksRUFBRTtBQUFSLENBQUQsQ0FBdkI7QUFDQSxJQUFNQyxhQUFhLEdBQUcsVUFBdEI7QUFDQSxJQUFNQyxrQkFBa0IsR0FBRyxDQUFDLEtBQUQsRUFBUSxNQUFSLENBQTNCLEMsQ0FFQTs7QUFDZSxTQUFTQyxTQUFULENBQ2JDLEtBRGEsRUFTYjtBQUFBLE1BUEFDLFFBT0EsdUVBUFcsVUFBQUMsTUFBTSxFQUFJO0FBQ25CLFFBQUlGLEtBQUssQ0FBQ0csS0FBVixFQUFpQjtBQUNmQyxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxjQUFaO0FBQ0FELE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZTCxLQUFaO0FBQ0Q7O0FBQ0QsV0FBT0UsTUFBUDtBQUNELEdBQ0Q7QUFDQSxNQUFNSSxVQUFVLEdBQ2ROLEtBQUssQ0FBQ00sVUFBTixJQUNBTixLQUFLLENBQUNPLGFBQU4sQ0FBb0JMLE1BRHBCLElBRUFiLDhCQUhGO0FBS0FXLEVBQUFBLEtBQUsscUJBQ0FBLEtBREE7QUFFSFEsSUFBQUEsY0FB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QTNCLENBQXpCO0FBQ0Q7O0FBRUQsYUFBT21CLGNBQVA7QUFDRCxLQTVCRCxDQTRCRSxPQUFPWCxHQUFQLEVBQVk7QUFDWnRHLE1BQUFBLE9BQU8sQ0FBQ29ILEtBQVIseURBQ2tEckIsZ0JBRGxEO0FBR0EsWUFBTU8sR0FBTjtBQUNEO0FBQ0YsR0FySEQ7O0FBdUhBMUcsRUFBQUEsS0FBSyxxQkFDQUEsS0FEQTtBQUVIMkIsSUFBQUEsT0FBTyxFQUFFekIsTUFBTSxDQUFDeUIsT0FBUCxDQUFlNEYsR0FBZixDQUFtQnJCLGFBQW5CLENBRk47QUFHSGhHLElBQUFBLE1BQU0sRUFBTkE7QUFIRyxJQUFMO0FBTUEsU0FBT3VILG9CQUFZQyxjQUFaLENBQTJCMUgsS0FBM0IsQ0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L25vLWR5bmFtaWMtcmVxdWlyZSAqL1xuXG5pbXBvcnQgbm9kZVBhdGggZnJvbSAncGF0aCdcbmltcG9ydCBjaG9raWRhciBmcm9tICdjaG9raWRhcidcbmltcG9ydCByZXNvbHZlRnJvbSBmcm9tICdyZXNvbHZlLWZyb20nXG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnXG4vL1xuaW1wb3J0IHsgY2xlYW5TbGFzaGVzLCBjdXRQYXRoVG9Sb290LCBpc0Fic29sdXRlVXJsIH0gZnJvbSAnLi4vdXRpbHMnXG5pbXBvcnQgY29yZVBsdWdpbnMsIHsgdmFsaWRhdGVQbHVnaW4gfSBmcm9tICcuL3BsdWdpbnMnXG5cbi8vIHRoZSBkZWZhdWx0IHN0YXRpYy5jb25maWcuanMgbG9jYXRpb25cbmNvbnN0IGRlZmF1bHRDb25maWcgPSB7fVxuY29uc3QgREVGQVVMVF9OQU1FX0ZPUl9TVEFUSUNfQ09ORklHX0ZJTEUgPSAnc3RhdGljLmNvbmZpZy5qcydcbmNvbnN0IERFRkFVTFRfUEFUSF9GT1JfU1RBVElDX0NPTkZJRyA9IG5vZGVQYXRoLnJlc29sdmUoXG4gIG5vZGVQYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgREVGQVVMVF9OQU1FX0ZPUl9TVEFUSUNfQ09ORklHX0ZJTEUpXG4pXG5jb25zdCBERUZBVUxUX1JPVVRFUyA9IFt7IHBhdGg6ICcvJyB9XVxuY29uc3QgREVGQVVMVF9FTlRSWSA9ICdpbmRleC5qcydcbmNvbnN0IERFRkFVTFRfRVhURU5TSU9OUyA9IFsnLmpzJywgJy5qc3gnXVxuXG4vLyBSZXRyaWV2ZXMgdGhlIHN0YXRpYy5jb25maWcuanMgZnJvbSB0aGUgY3VycmVudCBwcm9qZWN0IGRpcmVjdG9yeVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q29uZmlnKFxuICBzdGF0ZSxcbiAgY2FsbGJhY2sgPSBjb25maWcgPT4ge1xuICAgIGlmIChzdGF0ZS5kZWJ1Zykge1xuICAgICAgY29uc29sZS5sb2coJ2dldENvbmZpZygpOicpXG4gICAgICBjb25zb2xlLmxvZyhzdGF0ZSlcbiAgICB9XG4gICAgcmV0dXJuIGNvbmZpZ1xuICB9XG4pIHtcbiAgY29uc3QgY29uZmlnUGF0aCA9XG4gICAgc3RhdGUuY29uZmlnUGF0aCB8fFxuICAgIHN0YXRlLnBhY2thZ2VDb25maWcuY29uZmlnIHx8XG4gICAgREVGQVVMVF9QQVRIX0ZPUl9TVEFUSUNfQ09ORklHXG5cbiAgc3RhdGUgPSB7XG4gICAgLi4uc3RhdGUsXG4gICAgb3JpZ2luYWxDb25maWc6IGNvbmZpZ1BhdGgsXG4gIH1cblxuICBjb25zdCByZXNvbHZlZFBhdGggPSBub2RlUGF0aC5yZXNvbHZlKGNvbmZpZ1BhdGgpXG5cbiAgY29uc3Qgbm9Db25maWcgPVxuICAgIGNvbmZpZ1BhdGggPT09IERFRkFVTFRfUEFUSF9GT1JfU1RBVElDX0NPTkZJRyAmJiAhcmVzb2x2ZWRQYXRoXG5cbiAgaWYgKG5vQ29uZmlnKSB7XG4gICAgLy8gbGFzdFxuICAgIHN0YXRlID0gYnVpbGRDb25maWcoc3RhdGUsIGRlZmF1bHRDb25maWcpXG4gICAgcmV0dXJuIGNhbGxiYWNrKHN0YXRlKVxuICB9XG5cbiAgc3RhdGUgPSBidWlsZENvbmZpZ0Zyb21QYXRoKHN0YXRlLCByZXNvbHZlZFBhdGggfHwgY29uZmlnUGF0aClcblxuICBpZiAoc3RhdGUuc3RhZ2UgPT09ICdkZXYnKSB7XG4gICAgY2hva2lkYXJcbiAgICAgIC53YXRjaChyZXNvbHZlZFBhdGgsIHtcbiAgICAgICAgaWdub3JlSW5pdGlhbDogdHJ1ZSxcbiAgICAgIH0pXG4gICAgICAub24oJ2FsbCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJycpXG4gICAgICAgIGNvbnNvbGUubG9nKGBVcGRhdGluZyBzdGF0aWMuY29uZmlnLmpzYClcbiAgICAgICAgc3RhdGUgPSBidWlsZENvbmZpZ0Zyb21QYXRoKHN0YXRlLCByZXNvbHZlZFBhdGgpXG4gICAgICAgIGNhbGxiYWNrKHN0YXRlKVxuICAgICAgfSlcbiAgfVxuXG4gIHJldHVybiBjYWxsYmFjayhzdGF0ZSlcbn1cblxuZnVuY3Rpb24gYnVpbGRDb25maWdGcm9tUGF0aChzdGF0ZSwgY29uZmlnUGF0aCkge1xuICBkZWxldGUgcmVxdWlyZS5jYWNoZVtjb25maWdQYXRoXVxuICBjb25zdCBjb25maWcgPSByZXF1aXJlKGNvbmZpZ1BhdGgpLmRlZmF1bHRcbiAgcmV0dXJuIGJ1aWxkQ29uZmlnKHN0YXRlLCBjb25maWcpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZENvbmZpZyhzdGF0ZSwgY29uZmlnID0ge30pIHtcbiAgLy8gRGVmYXVsdCBQYXRoc1xuICBsZXQgcGF0aHMgPSB7XG4gICAgcm9vdDogbm9kZVBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpKSxcbiAgICBzcmM6ICdzcmMnLFxuICAgIGRpc3Q6ICdkaXN0JyxcbiAgICB0ZW1wOiAndG1wJyxcbiAgICBidWlsZEFydGlmYWN0czogJ2FydGlmYWN0cycsXG4gICAgZGV2RGlzdDogJ3RtcC9kZXYtc2VydmVyJyxcbiAgICBwdWJsaWM6ICdwdWJsaWMnLFxuICAgIHBsdWdpbnM6ICdwbHVnaW5zJyxcbiAgICBwYWdlczogJ3NyYy9wYWdlcycsXG4gICAgbm9kZU1vZHVsZXM6ICdub2RlX21vZHVsZXMnLFxuICAgIGFzc2V0czogJycsXG4gICAgLi4uKGNvbmZpZy5wYXRocyB8fCB7fSksXG4gIH1cblxuICAvLyBVc2UgdGhlIHJvb3QgdG8gcmVzb2x2ZSBhbGwgb3RoZXIgcmVsYXRpdmUgcGF0aHNcbiAgY29uc3QgcmVzb2x2ZVBhdGggPSByZWxhdGl2ZVBhdGggPT4gbm9kZVBhdGgucmVzb2x2ZShwYXRocy5yb290LCByZWxhdGl2ZVBhdGgpXG5cbiAgLy8gUmVzb2x2ZSBhbmQgcmVwbGFjZSBhbGwgcGF0aHNzXG4gIGNvbnN0IERJU1QgPVxuICAgIHByb2Nlc3MuZW52LlJFQUNUX1NUQVRJQ19FTlYgPT09ICdkZXZlbG9wbWVudCdcbiAgICAgID8gcmVzb2x2ZVBhdGgocGF0aHMuZGV2RGlzdCB8fCBwYXRocy5kaXN0KVxuICAgICAgOiByZXNvbHZlUGF0aChwYXRocy5kaXN0KVxuICBjb25zdCBBU1NFVFMgPSBub2RlUGF0aC5yZXNvbHZlKERJU1QsIHBhdGhzLmFzc2V0cylcblxuICBwYXRocyA9IHtcbiAgICBST09UOiBwYXRocy5yb290LFxuICAgIFNSQzogcmVzb2x2ZVBhdGgocGF0aHMuc3JjKSxcbiAgICBESVNULFxuICAgIEFTU0VUUyxcbiAgICBQTFVHSU5TOiByZXNvbHZlUGF0aChwYXRocy5wbHVnaW5zKSxcbiAgICBURU1QOiByZXNvbHZlUGF0aChwYXRocy50ZW1wKSxcbiAgICBBUlRJRkFDVFM6IHJlc29sdmVQYXRoKHBhdGhzLmJ1aWxkQXJ0aWZhY3RzKSxcbiAgICBQVUJMSUM6IHJlc29sdmVQYXRoKHBhdGhzLnB1YmxpYyksXG4gICAgTk9ERV9NT0RVTEVTOiByZXNvbHZlUGF0aChwYXRocy5ub2RlTW9kdWxlcyksXG4gICAgRVhDTFVERV9NT0RVTEVTOlxuICAgICAgcGF0aHMuZXhjbHVkZVJlc29sdmVkTW9kdWxlcyB8fCByZXNvbHZlUGF0aChwYXRocy5ub2RlTW9kdWxlcyksXG4gICAgUEFDS0FHRTogcmVzb2x2ZVBhdGgoJ3BhY2thZ2UuanNvbicpLFxuICAgIEhUTUxfVEVNUExBVEU6IG5vZGVQYXRoLmpvaW4oRElTVCwgJ2luZGV4Lmh0bWwnKSxcbiAgICBTVEFUSUNfREFUQTogbm9kZVBhdGguam9pbihBU1NFVFMsICdzdGF0aWNEYXRhJyksXG4gIH1cblxuICAvLyBzaXRlUm9vdCwgYmFzZVBhdGgsIHB1YmxpY1BhdGgsIGFuZCBhc3NldFBhdGggcmVzb2x1dGlvblxuICBsZXQgc2l0ZVJvb3QgPSAnJ1xuICBsZXQgYmFzZVBhdGggPSAnJ1xuICBsZXQgYXNzZXRzUGF0aCA9ICcnXG4gIGlmIChwcm9jZXNzLmVudi5SRUFDVF9TVEFUSUNfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgYmFzZVBhdGggPSBjbGVhblNsYXNoZXMoY29uZmlnLmRldkJhc2VQYXRoKVxuICAgIGFzc2V0c1BhdGggPSBjb25maWcuZGV2QXNzZXRzUGF0aCB8fCBwYXRocy5hc3NldHMgfHwgYXNzZXRzUGF0aFxuICB9IGVsc2UgaWYgKHN0YXRlLnN0YWdpbmcpIHtcbiAgICBzaXRlUm9vdCA9IGN1dFBhdGhUb1Jvb3QoY29uZmlnLnN0YWdpbmdTaXRlUm9vdCB8fCAnLycsICckMScpXG4gICAgYmFzZVBhdGggPSBjbGVhblNsYXNoZXMoY29uZmlnLnN0YWdpbmdCYXNlUGF0aClcbiAgICBhc3NldHNQYXRoID0gY29uZmlnLnN0YWdpbmdBc3NldHNQYXRoIHx8IHBhdGhzLmFzc2V0cyB8fCBhc3NldHNQYXRoXG4gIH0gZWxzZSB7XG4gICAgc2l0ZVJvb3QgPSBjdXRQYXRoVG9Sb290KGNvbmZpZy5zaXRlUm9vdCB8fCAnLycsICckMScpXG4gICAgYmFzZVBhdGggPSBjbGVhblNsYXNoZXMoY29uZmlnLmJhc2VQYXRoKVxuICAgIGFzc2V0c1BhdGggPSBjb25maWcuYXNzZXRzUGF0aCB8fCBwYXRocy5hc3NldHMgfHwgYXNzZXRzUGF0aFxuICB9XG4gIGNvbnN0IHB1YmxpY1BhdGggPSBgJHtjbGVhblNsYXNoZXMoYCR7c2l0ZVJvb3R9LyR7YmFzZVBhdGh9YCwge1xuICAgIGxlYWRpbmc6IGZhbHNlLFxuICB9KX0vYFxuXG4gIGlmIChhc3NldHNQYXRoICYmICFpc0Fic29sdXRlVXJsKGFzc2V0c1BhdGgpKSB7XG4gICAgYXNzZXRzUGF0aCA9IGAvJHtjbGVhblNsYXNoZXMoYCR7YmFzZVBhdGh9LyR7YXNzZXRzUGF0aH1gKX0vYFxuICB9XG5cbiAgLy8gYWRkIHRyYWlsaW5nIHNsYXNoIG9ubHkgaWYgYXNzZXRzUGF0aCB3YXMgc3VwcGxpZWQsIGJ1dCBubyB0cmFpbGluZyBzbGFzaFxuICBpZiAoYXNzZXRzUGF0aCAmJiAhYXNzZXRzUGF0aC5lbmRzV2l0aCgnLycpKSB7XG4gICAgYXNzZXRzUGF0aCA9IGAke2Fzc2V0c1BhdGh9L2BcbiAgfVxuXG4gIC8vIEFkZCB0aGUgcHJvamVjdCByb290IGFzIGEgcGx1Z2luLiBUaGlzIGFsbG93cyB0aGUgZGV2XG4gIC8vIHRvIHVzZSB0aGUgcGx1Z2luIGFwaSBkaXJlY3RvcnkgaW4gdGhlaXIgcHJvamVjdCBpZiB0aGV5IHdhbnRcbiAgY29uc3QgcGx1Z2lucyA9IFsuLi4oY29uZmlnLnBsdWdpbnMgfHwgW10pLCBwYXRocy5ST09UXVxuXG4gIC8vIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmICFlbnRyeSkge1xuICAvLyAgIHRocm93IG5ldyBFcnJvcihcbiAgLy8gICAgIGBDb3VsZCBub3QgcmVzb2x2ZSBlbnRyeSBmaWxlIGZyb20gbG9jYXRpb246ICR7ZW50cnl9IHVzaW5nIGV4dGVuc2lvbnM6ICR7KFxuICAvLyAgICAgICBjb25maWcuZXh0ZW5zaW9ucyB8fCBERUZBVUxUX0VYVEVOU0lPTlNcbiAgLy8gICAgICkuam9pbignLCAnKX1gXG4gIC8vICAgKVxuICAvLyB9XG5cbiAgLy8gRGVmYXVsdHNcbiAgY29uZmlnID0ge1xuICAgIC8vIERlZmF1bHRzXG4gICAgZ2V0U2l0ZURhdGE6ICgpID0+ICh7fSksXG4gICAgcHJlZmV0Y2hSYXRlOiA1LFxuICAgIG1heFRocmVhZHM6IEluZmluaXR5LFxuICAgIGRpc2FibGVSb3V0ZVByZWZpeGluZzogZmFsc2UsXG4gICAgb3V0cHV0RmlsZVJhdGU6IDEwMCxcbiAgICBleHRlbnNpb25zOiBERUZBVUxUX0VYVEVOU0lPTlMsXG4gICAgZ2V0Um91dGVzOiBhc3luYyAoKSA9PiBERUZBVUxUX1JPVVRFUyxcbiAgICBtaW5Mb2FkVGltZTogMjAwLFxuICAgIGRpc2FibGVQcmVsb2FkOiBmYWxzZSxcbiAgICBkaXNhYmxlUnVudGltZTogZmFsc2UsXG4gICAgcHJlbG9hZFBvbGxJbnRlcnZhbDogMzAwLFxuICAgIHByb2R1Y3Rpb25Tb3VyY2VNYXBzOiBmYWxzZSxcbiAgICBlbnRyeTogREVGQVVMVF9FTlRSWSxcblxuICAgIC8vIENvbmZpZyBPdmVycmlkZXNcbiAgICAuLi5jb25maWcsXG5cbiAgICAvLyBNYXRlcmlhbGl6ZWQgT3ZlcnJpZGVzXG4gICAgcGF0aHMsXG4gICAgcGx1Z2lucyxcbiAgICBzaXRlUm9vdCxcbiAgICBiYXNlUGF0aCxcbiAgICBwdWJsaWNQYXRoLFxuICAgIGFzc2V0c1BhdGgsXG4gICAgZXh0cmFjdENzc0NodW5rczogY29uZmlnLmV4dHJhY3RDc3NDaHVua3MgfHwgZmFsc2UsXG4gICAgaW5saW5lQ3NzOiBjb25maWcuaW5saW5lQ3NzIHx8IGZhbHNlLFxuICAgIGJhYmVsRXhjbHVkZXM6IGNvbmZpZy5iYWJlbEV4Y2x1ZGVzIHx8IFtdLFxuICAgIGRldlNlcnZlcjoge1xuICAgICAgaG9zdDogJ2xvY2FsaG9zdCcsXG4gICAgICBwb3J0OiAzMDAwLFxuICAgICAgLi4uKGNvbmZpZy5kZXZTZXJ2ZXIgfHwge30pLFxuICAgIH0sXG4gIH1cblxuICBjb25maWcudGVyc2VyID0gY29uZmlnLnRlcnNlciB8fCB7fVxuICBjb25maWcudGVyc2VyLnRlcnNlck9wdGlvbnMgPSBjb25maWcudGVyc2VyLnRlcnNlck9wdGlvbnMgfHwge31cbiAgY29uZmlnLnRlcnNlci50ZXJzZXJPcHRpb25zLm1hbmdsZSA9IGNvbmZpZy50ZXJzZXIudGVyc2VyT3B0aW9ucy5tYW5nbGUgfHwge31cbiAgY29uZmlnLnRlcnNlci50ZXJzZXJPcHRpb25zLnBhcnNlID0gY29uZmlnLnRlcnNlci50ZXJzZXJPcHRpb25zLnBhcnNlIHx8IHt9XG4gIGNvbmZpZy50ZXJzZXIudGVyc2VyT3B0aW9ucy5jb21wcmVzcyA9XG4gICAgY29uZmlnLnRlcnNlci50ZXJzZXJPcHRpb25zLmNvbXByZXNzIHx8IHt9XG4gIGNvbmZpZy50ZXJzZXIudGVyc2VyT3B0aW9ucy5vdXRwdXQgPSBjb25maWcudGVyc2VyLnRlcnNlck9wdGlvbnMub3V0cHV0IHx8IHt9XG5cbiAgLy8gU2V0IGVudiB2YXJpYWJsZXMgdG8gYmUgdXNlZCBjbGllbnQgc2lkZVxuICBwcm9jZXNzLmVudi5SRUFDVF9TVEFUSUNfTUlOX0xPQURfVElNRSA9IGNvbmZpZy5taW5Mb2FkVGltZVxuICBwcm9jZXNzLmVudi5SRUFDVF9TVEFUSUNfUFJFRkVUQ0hfUkFURSA9IGNvbmZpZy5wcmVmZXRjaFJhdGVcbiAgcHJvY2Vzcy5lbnYuUkVBQ1RfU1RBVElDX0RJU0FCTEVfUk9VVEVfUFJFRklYSU5HID1cbiAgICBjb25maWcuZGlzYWJsZVJvdXRlUHJlZml4aW5nXG4gIHByb2Nlc3MuZW52LlJFQUNUX1NUQVRJQ19ESVNBQkxFX1BSRUxPQUQgPSBjb25maWcuZGlzYWJsZVByZWxvYWRcbiAgcHJvY2Vzcy5lbnYuUkVBQ1RfU1RBVElDX0RJU0FCTEVfUlVOVElNRSA9IGNvbmZpZy5kaXNhYmxlUnVudGltZVxuICBwcm9jZXNzLmVudi5SRUFDVF9TVEFUSUNfUFJFTE9BRF9QT0xMX0lOVEVSVkFMID0gY29uZmlnLnByZWxvYWRQb2xsSW50ZXJ2YWx3XG5cbiAgcHJvY2Vzcy5lbnYuUkVBQ1RfU1RBVElDX1JPT1RfUEFUSF9SRUFEX09OTFkgPSBwYXRocy5ST09UXG5cbiAgcHJvY2Vzcy5lbnYuUkVBQ1RfU1RBVElDX1RFTVBMQVRFU19QQVRIID0gbm9kZVBhdGguam9pbihcbiAgICBwYXRocy5BUlRJRkFDVFMsXG4gICAgJ3JlYWN0LXN0YXRpYy10ZW1wbGF0ZXMuanMnXG4gIClcbiAgcHJvY2Vzcy5lbnYuUkVBQ1RfU1RBVElDX1BMVUdJTlNfUEFUSCA9IG5vZGVQYXRoLmpvaW4oXG4gICAgcGF0aHMuQVJUSUZBQ1RTLFxuICAgICdyZWFjdC1zdGF0aWMtYnJvd3Nlci1wbHVnaW5zLmpzJ1xuICApXG4gIHByb2Nlc3MuZW52LlJFQUNUX1NUQVRJQ19VTklWRVJTQUxfUEFUSCA9IHJlcXVpcmUucmVzb2x2ZShcbiAgICAncmVhY3QtdW5pdmVyc2FsLWNvbXBvbmVudCdcbiAgKVxuXG4gIGNvbnN0IHJlc29sdmVQbHVnaW4gPSBvcmlnaW5hbExvY2F0aW9uID0+IHtcbiAgICBsZXQgb3B0aW9ucyA9IHt9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob3JpZ2luYWxMb2NhdGlvbikpIHtcbiAgICAgIG9wdGlvbnMgPSBvcmlnaW5hbExvY2F0aW9uWzFdIHx8IHt9XG4gICAgICBvcmlnaW5hbExvY2F0aW9uID0gb3JpZ2luYWxMb2NhdGlvblswXVxuICAgIH1cblxuICAgIGNvbnN0IGxvY2F0aW9uID0gW1xuICAgICAgKCkgPT4ge1xuICAgICAgICAvLyBBYnNvbHV0ZSByZXF1aXJlXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgZm91bmQgPSByZXF1aXJlLnJlc29sdmUob3JpZ2luYWxMb2NhdGlvbilcbiAgICAgICAgICByZXR1cm4gZm91bmQuaW5jbHVkZXMoJy4nKSA/IG5vZGVQYXRoLnJlc29sdmUoZm91bmQsICcuLi8nKSA6IGZvdW5kXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIC8vXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAoKSA9PiB7XG4gICAgICAgIC8vIEFic29sdXRlXG4gICAgICAgIGlmIChmcy5wYXRoRXhpc3RzU3luYyhvcmlnaW5hbExvY2F0aW9uKSkge1xuICAgICAgICAgIHJldHVybiBvcmlnaW5hbExvY2F0aW9uXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAoKSA9PiB7XG4gICAgICAgIC8vIFBsdWdpbnMgRGlyXG4gICAgICAgIGNvbnN0IGZvdW5kID0gbm9kZVBhdGgucmVzb2x2ZShwYXRocy5QTFVHSU5TLCBvcmlnaW5hbExvY2F0aW9uKVxuICAgICAgICBpZiAoZnMucGF0aEV4aXN0c1N5bmMoZm91bmQpKSB7XG4gICAgICAgICAgcmV0dXJuIGZvdW5kXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAoKSA9PiB7XG4gICAgICAgIC8vIFBsdWdpbnMgRGlyIHJlcXVpcmVcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBmb3VuZCA9IHJlc29sdmVGcm9tKHBhdGhzLlBMVUdJTlMsIG9yaWdpbmFsTG9jYXRpb24pXG4gICAgICAgICAgcmV0dXJuIGZvdW5kLmluY2x1ZGVzKCcuJykgPyBub2RlUGF0aC5yZXNvbHZlKGZvdW5kLCAnLi4vJykgOiBmb3VuZFxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAvL1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgKCkgPT4ge1xuICAgICAgICAvLyBDV0RcbiAgICAgICAgY29uc3QgZm91bmQgPSBub2RlUGF0aC5yZXNvbHZlKHByb2Nlc3MuY3dkKCksIG9yaWdpbmFsTG9jYXRpb24pXG4gICAgICAgIGlmIChmcy5wYXRoRXhpc3RzU3luYyhmb3VuZCkpIHtcbiAgICAgICAgICByZXR1cm4gZm91bmRcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICgpID0+IHtcbiAgICAgICAgLy8gQ1dEIHJlcXVpcmVcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBmb3VuZCA9IHJlc29sdmVGcm9tKHByb2Nlc3MuY3dkKCksIG9yaWdpbmFsTG9jYXRpb24pXG4gICAgICAgICAgcmV0dXJuIGZvdW5kLmluY2x1ZGVzKCcuJykgPyBub2RlUGF0aC5yZXNvbHZlKGZvdW5kLCAnLi4vJykgOiBmb3VuZFxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAvL1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgKCkgPT4ge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0Jykge1xuICAgICAgICAgIC8vIEFsbG93IHBsdWdpbnMgdG8gYmUgbW9ja2VkXG4gICAgICAgICAgcmV0dXJuIHJlcXVpcmUoJ3BhdGgnKS5yZXNvbHZlKCcuL3NyYy9zdGF0aWMvX19tb2Nrc19fL21vY2stcGx1Z2luJylcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICBdLnJlZHVjZSgocHJldiwgY3VycikgPT4gcHJldiB8fCBjdXJyKCksIG51bGwpXG5cbiAgICAvLyBUT0RPOiBXZSBoYXZlIHRvIGRvIHRoaXMgYmVjYXVzZSB3ZSBkb24ndCBoYXZlIGEgZ29vZCBtb2NrIGZvciBwcm9jZXNzLmN3ZCgpIDooXG4gICAgaWYgKCFsb2NhdGlvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgQ291bGQgbm90IGZpbmQgYSBwbHVnaW4gZGlyZWN0b3J5IGZvciB0aGUgcGx1Z2luOiBcIiR7b3JpZ2luYWxMb2NhdGlvbn1cIi4gV2UgbXVzdCBiYWlsIWBcbiAgICAgIClcbiAgICB9XG5cbiAgICBsZXQgbm9kZUxvY2F0aW9uID0gbm9kZVBhdGguam9pbihsb2NhdGlvbiwgJ25vZGUuYXBpLmpzJylcbiAgICBsZXQgYnJvd3NlckxvY2F0aW9uID0gbm9kZVBhdGguam9pbihsb2NhdGlvbiwgJ2Jyb3dzZXIuYXBpLmpzJylcblxuICAgIC8vIERldGVjdCBpZiB0aGUgbm9kZSBwbHVnaW4gZW50cnkgZXhpc3RzLCBhbmQgcHJvdmlkZSB0aGUgbm9kZVJlc29sdmVyIHRvIGl0XG4gICAgbm9kZUxvY2F0aW9uID0gZnMucGF0aEV4aXN0c1N5bmMobm9kZUxvY2F0aW9uKSA/IG5vZGVMb2NhdGlvbiA6IG51bGxcblxuICAgIC8vIERldGVjdCBpZiB0aGUgYnJvd3NlciBwbHVnaW4gZW50cnkgZXhpc3RzLCBhbmQgcHJvdmlkZSB0aGUgbm9kZVJlc29sdmVyIHRvIGl0XG4gICAgYnJvd3NlckxvY2F0aW9uID0gZnMucGF0aEV4aXN0c1N5bmMoYnJvd3NlckxvY2F0aW9uKVxuICAgICAgPyBicm93c2VyTG9jYXRpb25cbiAgICAgIDogbnVsbFxuXG4gICAgbGV0IGJ1aWxkUGx1Z2luSG9va3MgPSAoKSA9PiAoe30pXG5cbiAgICB0cnkge1xuICAgICAgLy8gR2V0IHRoZSBob29rcyBmb3IgdGhlIG5vZGUgYXBpXG4gICAgICBpZiAobm9kZUxvY2F0aW9uKSB7XG4gICAgICAgIGJ1aWxkUGx1Z2luSG9va3MgPSByZXF1aXJlKG5vZGVMb2NhdGlvbikuZGVmYXVsdFxuICAgICAgfSBlbHNlIGlmIChvcmlnaW5hbExvY2F0aW9uICE9PSBwYXRocy5ST09UICYmICFicm93c2VyTG9jYXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBDb3VsZCBub3QgZmluZCBhIHZhbGlkIG5vZGUuYXBpLmpzIG9yIGJyb3dzZXIuYXBpLmpzIHBsdWdpbiBmaWxlIGluIFwiJHtsb2NhdGlvbn1cIi4gXFxuYCArXG4gICAgICAgICAgICBgVGhlIG9yaWdpbmFsIGxvY2F0aW9uOiBcIiR7b3JpZ2luYWxMb2NhdGlvbn1cIi4gXFxuYCArXG4gICAgICAgICAgICBgVGhlIHJvb3QgbG9jYXRpb246IFwiJHtwYXRocy5ST09UfVwiLmBcbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICBjb25zdCByZXNvbHZlZFBsdWdpbiA9IHtcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIG5vZGVMb2NhdGlvbixcbiAgICAgICAgYnJvd3NlckxvY2F0aW9uLFxuICAgICAgICBvcHRpb25zLFxuICAgICAgICBob29rczogYnVpbGRQbHVnaW5Ib29rcyhvcHRpb25zKSB8fCB7fSxcbiAgICAgIH1cblxuICAgICAgdmFsaWRhdGVQbHVnaW4ocmVzb2x2ZWRQbHVnaW4pXG5cbiAgICAgIC8vIFJlY3Vyc2l2ZWx5IHJlc29sdmUgcGx1Z2luc1xuICAgICAgaWYgKHJlc29sdmVkUGx1Z2luLnBsdWdpbnMpIHtcbiAgICAgICAgcmVzb2x2ZWRQbHVnaW4ucGx1Z2lucyA9IHJlc29sdmVkUGx1Z2luLnBsdWdpbnMubWFwKHJlc29sdmVQbHVnaW4pXG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXNvbHZlZFBsdWdpblxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgYFRoZSBmb2xsb3dpbmcgZXJyb3Igb2NjdXJyZWQgaW4gdGhlIHBsdWdpbjogXCIke29yaWdpbmFsTG9jYXRpb259XCJgXG4gICAgICApXG4gICAgICB0aHJvdyBlcnJcbiAgICB9XG4gIH1cblxuICBzdGF0ZSA9IHtcbiAgICAuLi5zdGF0ZSxcbiAgICBwbHVnaW5zOiBjb25maWcucGx1Z2lucy5tYXAocmVzb2x2ZVBsdWdpbiksXG4gICAgY29uZmlnLFxuICB9XG5cbiAgcmV0dXJuIGNvcmVQbHVnaW5zLmFmdGVyR2V0Q29uZmlnKHN0YXRlKVxufVxuIl19