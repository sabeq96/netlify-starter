"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _path = _interopRequireDefault(require("path"));

var _slash = _interopRequireDefault(require("slash"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _plugins = _interopRequireDefault(require("./plugins"));

//
var _default =
/*#__PURE__*/
function () {
  var _ref = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(state) {
    var _state, plugins, config, pluginImports, recurse, pluginsText, pluginImportsText, file, targetPath;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _plugins["default"].beforePrepareBrowserPlugins(state);

          case 2:
            state = _context.sent;
            _state = state, plugins = _state.plugins, config = _state.config; // A deduped list of pluginImports

            pluginImports = [];

            recurse = function recurse(plugins) {
              return (// Return an array of plugins
                "[".concat(plugins.map(function (plugin) {
                  var browserLocation = plugin.browserLocation; // Add the plugin to the list of pluginImports

                  var pluginIndex = browserLocation ? pluginImports.indexOf(browserLocation) : -1;

                  if (pluginIndex === -1 && browserLocation) {
                    pluginImports.push((0, _slash["default"])(_path["default"].resolve(config.paths.ARTIFACTS, browserLocation)));
                    pluginIndex = pluginImports.length - 1;
                  }

                  var location = plugin.location,
                      plugins = plugin.plugins,
                      options = plugin.options; // IIF to return the final plugin

                  return "{\n        location: \"".concat((0, _slash["default"])(_path["default"].resolve(config.paths.ARTIFACTS, location)), "\",\n        plugins: ").concat(recurse(plugins || []), ",\n        hooks: ").concat(browserLocation ? "plugin".concat(pluginIndex, "(").concat(JSON.stringify(options), ")") : "{}", "\n      }");
                }).join(',\n'), "]")
              );
            }; // Create the pluginsText


            pluginsText = recurse(plugins || []); // Create the pluginImportsText

            pluginImportsText = pluginImports.map(function (imp, index) {
              return "import plugin".concat(index, " from '").concat(imp, "'");
            }).join('\n'); // Create the file text

            file = "// Imports\n".concat(pluginImportsText, "\n\n// Plugins\nconst plugins = ").concat(pluginsText, "\n\n// Export em!\nexport default plugins");
            targetPath = _path["default"].join(process.env.REACT_STATIC_PLUGINS_PATH);
            _context.next = 12;
            return _fsExtra["default"].remove(targetPath);

          case 12:
            _context.next = 14;
            return _fsExtra["default"].outputFile(targetPath, file);

          case 14:
            return _context.abrupt("return", _plugins["default"].afterPrepareBrowserPlugins(state));

          case 15:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdGF0aWMvZ2VuZXJhdGVCcm93c2VyUGx1Z2lucy5qcyJdLCJuYW1lcyI6WyJzdGF0ZSIsImNvcmVQbHVnaW5zIiwiYmVmb3JlUHJlcGFyZUJyb3dzZXJQbHVnaW5zIiwicGx1Z2lucyIsImNvbmZpZyIsInBsdWdpbkltcG9ydHMiLCJyZWN1cnNlIiwibWFwIiwicGx1Z2luIiwiYnJvd3NlckxvY2F0aW9uIiwicGx1Z2luSW5kZXgiLCJpbmRleE9mIiwicHVzaCIsInBhdGgiLCJyZXNvbHZlIiwicGF0aHMiLCJBUlRJRkFDVFMiLCJsZW5ndGgiLCJsb2NhdGlvbiIsIm9wdGlvbnMiLCJKU09OIiwic3RyaW5naWZ5Iiwiam9pbiIsInBsdWdpbnNUZXh0IiwicGx1Z2luSW1wb3J0c1RleHQiLCJpbXAiLCJpbmRleCIsImZpbGUiLCJ0YXJnZXRQYXRoIiwicHJvY2VzcyIsImVudiIsIlJFQUNUX1NUQVRJQ19QTFVHSU5TX1BBVEgiLCJmcyIsInJlbW92ZSIsIm91dHB1dEZpbGUiLCJhZnRlclByZXBhcmVCcm93c2VyUGx1Z2lucyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBOztBQURBOzs7Ozs7K0JBR2UsaUJBQU1BLEtBQU47QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsbUJBQ0NDLG9CQUFZQywyQkFBWixDQUF3Q0YsS0FBeEMsQ0FERDs7QUFBQTtBQUNiQSxZQUFBQSxLQURhO0FBQUEscUJBR2VBLEtBSGYsRUFHTEcsT0FISyxVQUdMQSxPQUhLLEVBR0lDLE1BSEosVUFHSUEsTUFISixFQUtiOztBQUNNQyxZQUFBQSxhQU5PLEdBTVMsRUFOVDs7QUFRUEMsWUFBQUEsT0FSTyxHQVFHLFNBQVZBLE9BQVUsQ0FBQUgsT0FBTztBQUFBLHFCQUNyQjtBQURxQiwyQkFFakJBLE9BQU8sQ0FDUkksR0FEQyxDQUNHLFVBQUFDLE1BQU0sRUFBSTtBQUFBLHNCQUNMQyxlQURLLEdBQ2VELE1BRGYsQ0FDTEMsZUFESyxFQUdiOztBQUNBLHNCQUFJQyxXQUFXLEdBQUdELGVBQWUsR0FDN0JKLGFBQWEsQ0FBQ00sT0FBZCxDQUFzQkYsZUFBdEIsQ0FENkIsR0FFN0IsQ0FBQyxDQUZMOztBQUdBLHNCQUFJQyxXQUFXLEtBQUssQ0FBQyxDQUFqQixJQUFzQkQsZUFBMUIsRUFBMkM7QUFDekNKLG9CQUFBQSxhQUFhLENBQUNPLElBQWQsQ0FDRSx1QkFBTUMsaUJBQUtDLE9BQUwsQ0FBYVYsTUFBTSxDQUFDVyxLQUFQLENBQWFDLFNBQTFCLEVBQXFDUCxlQUFyQyxDQUFOLENBREY7QUFHQUMsb0JBQUFBLFdBQVcsR0FBR0wsYUFBYSxDQUFDWSxNQUFkLEdBQXVCLENBQXJDO0FBQ0Q7O0FBWlksc0JBY0xDLFFBZEssR0FjMEJWLE1BZDFCLENBY0xVLFFBZEs7QUFBQSxzQkFjS2YsT0FkTCxHQWMwQkssTUFkMUIsQ0FjS0wsT0FkTDtBQUFBLHNCQWNjZ0IsT0FkZCxHQWMwQlgsTUFkMUIsQ0FjY1csT0FkZCxFQWdCYjs7QUFDQSwwREFDYSx1QkFBTU4saUJBQUtDLE9BQUwsQ0FBYVYsTUFBTSxDQUFDVyxLQUFQLENBQWFDLFNBQTFCLEVBQXFDRSxRQUFyQyxDQUFOLENBRGIsbUNBRVdaLE9BQU8sQ0FBQ0gsT0FBTyxJQUFJLEVBQVosQ0FGbEIsK0JBSUVNLGVBQWUsbUJBQ0ZDLFdBREUsY0FDYVUsSUFBSSxDQUFDQyxTQUFMLENBQWVGLE9BQWYsQ0FEYixhQUpqQjtBQVNELGlCQTNCQyxFQTRCREcsSUE1QkMsQ0E0QkksS0E1QkosQ0FGaUI7QUFBQTtBQUFBLGFBUlYsRUF3Q2I7OztBQUNNQyxZQUFBQSxXQXpDTyxHQXlDT2pCLE9BQU8sQ0FBQ0gsT0FBTyxJQUFJLEVBQVosQ0F6Q2QsRUEyQ2I7O0FBQ01xQixZQUFBQSxpQkE1Q08sR0E0Q2FuQixhQUFhLENBQ3BDRSxHQUR1QixDQUNuQixVQUFDa0IsR0FBRCxFQUFNQyxLQUFOO0FBQUEsNENBQWdDQSxLQUFoQyxvQkFBK0NELEdBQS9DO0FBQUEsYUFEbUIsRUFFdkJILElBRnVCLENBRWxCLElBRmtCLENBNUNiLEVBZ0RiOztBQUNNSyxZQUFBQSxJQWpETyx5QkFrRGJILGlCQWxEYSw2Q0FxREdELFdBckRIO0FBMERQSyxZQUFBQSxVQTFETyxHQTBETWYsaUJBQUtTLElBQUwsQ0FBVU8sT0FBTyxDQUFDQyxHQUFSLENBQVlDLHlCQUF0QixDQTFETjtBQUFBO0FBQUEsbUJBMkRQQyxvQkFBR0MsTUFBSCxDQUFVTCxVQUFWLENBM0RPOztBQUFBO0FBQUE7QUFBQSxtQkE0RFBJLG9CQUFHRSxVQUFILENBQWNOLFVBQWQsRUFBMEJELElBQTFCLENBNURPOztBQUFBO0FBQUEsNkNBOEROMUIsb0JBQVlrQywwQkFBWixDQUF1Q25DLEtBQXZDLENBOURNOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xuaW1wb3J0IHNsYXNoIGZyb20gJ3NsYXNoJ1xuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJ1xuLy9cbmltcG9ydCBjb3JlUGx1Z2lucyBmcm9tICcuL3BsdWdpbnMnXG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIHN0YXRlID0+IHtcbiAgc3RhdGUgPSBhd2FpdCBjb3JlUGx1Z2lucy5iZWZvcmVQcmVwYXJlQnJvd3NlclBsdWdpbnMoc3RhdGUpXG5cbiAgY29uc3QgeyBwbHVnaW5zLCBjb25maWcgfSA9IHN0YXRlXG5cbiAgLy8gQSBkZWR1cGVkIGxpc3Qgb2YgcGx1Z2luSW1wb3J0c1xuICBjb25zdCBwbHVnaW5JbXBvcnRzID0gW11cblxuICBjb25zdCByZWN1cnNlID0gcGx1Z2lucyA9PlxuICAgIC8vIFJldHVybiBhbiBhcnJheSBvZiBwbHVnaW5zXG4gICAgYFske3BsdWdpbnNcbiAgICAgIC5tYXAocGx1Z2luID0+IHtcbiAgICAgICAgY29uc3QgeyBicm93c2VyTG9jYXRpb24gfSA9IHBsdWdpblxuXG4gICAgICAgIC8vIEFkZCB0aGUgcGx1Z2luIHRvIHRoZSBsaXN0IG9mIHBsdWdpbkltcG9ydHNcbiAgICAgICAgbGV0IHBsdWdpbkluZGV4ID0gYnJvd3NlckxvY2F0aW9uXG4gICAgICAgICAgPyBwbHVnaW5JbXBvcnRzLmluZGV4T2YoYnJvd3NlckxvY2F0aW9uKVxuICAgICAgICAgIDogLTFcbiAgICAgICAgaWYgKHBsdWdpbkluZGV4ID09PSAtMSAmJiBicm93c2VyTG9jYXRpb24pIHtcbiAgICAgICAgICBwbHVnaW5JbXBvcnRzLnB1c2goXG4gICAgICAgICAgICBzbGFzaChwYXRoLnJlc29sdmUoY29uZmlnLnBhdGhzLkFSVElGQUNUUywgYnJvd3NlckxvY2F0aW9uKSlcbiAgICAgICAgICApXG4gICAgICAgICAgcGx1Z2luSW5kZXggPSBwbHVnaW5JbXBvcnRzLmxlbmd0aCAtIDFcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgbG9jYXRpb24sIHBsdWdpbnMsIG9wdGlvbnMgfSA9IHBsdWdpblxuXG4gICAgICAgIC8vIElJRiB0byByZXR1cm4gdGhlIGZpbmFsIHBsdWdpblxuICAgICAgICByZXR1cm4gYHtcbiAgICAgICAgbG9jYXRpb246IFwiJHtzbGFzaChwYXRoLnJlc29sdmUoY29uZmlnLnBhdGhzLkFSVElGQUNUUywgbG9jYXRpb24pKX1cIixcbiAgICAgICAgcGx1Z2luczogJHtyZWN1cnNlKHBsdWdpbnMgfHwgW10pfSxcbiAgICAgICAgaG9va3M6ICR7XG4gICAgICAgICAgYnJvd3NlckxvY2F0aW9uXG4gICAgICAgICAgICA/IGBwbHVnaW4ke3BsdWdpbkluZGV4fSgke0pTT04uc3RyaW5naWZ5KG9wdGlvbnMpfSlgXG4gICAgICAgICAgICA6IGB7fWBcbiAgICAgICAgfVxuICAgICAgfWBcbiAgICAgIH0pXG4gICAgICAuam9pbignLFxcbicpfV1gXG5cbiAgLy8gQ3JlYXRlIHRoZSBwbHVnaW5zVGV4dFxuICBjb25zdCBwbHVnaW5zVGV4dCA9IHJlY3Vyc2UocGx1Z2lucyB8fCBbXSlcblxuICAvLyBDcmVhdGUgdGhlIHBsdWdpbkltcG9ydHNUZXh0XG4gIGNvbnN0IHBsdWdpbkltcG9ydHNUZXh0ID0gcGx1Z2luSW1wb3J0c1xuICAgIC5tYXAoKGltcCwgaW5kZXgpID0+IGBpbXBvcnQgcGx1Z2luJHtpbmRleH0gZnJvbSAnJHtpbXB9J2ApXG4gICAgLmpvaW4oJ1xcbicpXG5cbiAgLy8gQ3JlYXRlIHRoZSBmaWxlIHRleHRcbiAgY29uc3QgZmlsZSA9IGAvLyBJbXBvcnRzXG4ke3BsdWdpbkltcG9ydHNUZXh0fVxuXG4vLyBQbHVnaW5zXG5jb25zdCBwbHVnaW5zID0gJHtwbHVnaW5zVGV4dH1cblxuLy8gRXhwb3J0IGVtIVxuZXhwb3J0IGRlZmF1bHQgcGx1Z2luc2BcblxuICBjb25zdCB0YXJnZXRQYXRoID0gcGF0aC5qb2luKHByb2Nlc3MuZW52LlJFQUNUX1NUQVRJQ19QTFVHSU5TX1BBVEgpXG4gIGF3YWl0IGZzLnJlbW92ZSh0YXJnZXRQYXRoKVxuICBhd2FpdCBmcy5vdXRwdXRGaWxlKHRhcmdldFBhdGgsIGZpbGUpXG5cbiAgcmV0dXJuIGNvcmVQbHVnaW5zLmFmdGVyUHJlcGFyZUJyb3dzZXJQbHVnaW5zKHN0YXRlKVxufVxuIl19